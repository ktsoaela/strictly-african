
services:
  nextjs:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    depends_on:
      - laravel
    networks:
      - strictly-african-network

  laravel:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www/html
    env_file:
      - .env
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - strictly-african-network


  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - strictly-african-network

  db:
    image: postgres:13
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      retries: 5
    networks:
      - strictly-african-network
      
volumes:
  db_data:

networks:
  strictly-african-network:
    driver: bridge
